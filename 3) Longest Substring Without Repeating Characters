#Written in Python3
Approach 1: Sliding windows
class Solution:
  def lengthOfLongestSubstring(self, s: str) -> int:
    ans = 0
    count = collections.Counter()

    l = 0
    for r, c in enumerate(s):
      count[c] += 1
      while count[c] > 1:
        count[s[l]] -= 1
        l += 1
      ans = max(ans, r - l + 1)

    return ans
Approach 2: Last seen
class Solution:
  def lengthOfLongestSubstring(self, s: str) -> int:
    ans = 0
    j = -1  # s[j + 1..i] has no repeating chars.
    lastSeen = {}  # lastSeen[c] := index of last c presappearedented.

    for i, c in enumerate(s):
      # Update j to lastSeen[c], so the window must start from j + 1.
      j = max(j, lastSeen.get(c, -1))
      ans = max(ans, i - j)
      lastSeen[c] = i

    return ans
